// Generated by gencpp from file ddynamic_reconfigure/TutorialParamsResponse.msg
// DO NOT EDIT!


#ifndef DDYNAMIC_RECONFIGURE_MESSAGE_TUTORIALPARAMSRESPONSE_H
#define DDYNAMIC_RECONFIGURE_MESSAGE_TUTORIALPARAMSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ddynamic_reconfigure
{
template <class ContainerAllocator>
struct TutorialParamsResponse_
{
  typedef TutorialParamsResponse_<ContainerAllocator> Type;

  TutorialParamsResponse_()
    : int_param(0)
    , double_param(0.0)
    , str_param()
    , bool_param(false)
    , enum_param(0)  {
    }
  TutorialParamsResponse_(const ContainerAllocator& _alloc)
    : int_param(0)
    , double_param(0.0)
    , str_param(_alloc)
    , bool_param(false)
    , enum_param(0)  {
  (void)_alloc;
    }



   typedef int32_t _int_param_type;
  _int_param_type int_param;

   typedef double _double_param_type;
  _double_param_type double_param;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _str_param_type;
  _str_param_type str_param;

   typedef uint8_t _bool_param_type;
  _bool_param_type bool_param;

   typedef int32_t _enum_param_type;
  _enum_param_type enum_param;





  typedef boost::shared_ptr< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TutorialParamsResponse_

typedef ::ddynamic_reconfigure::TutorialParamsResponse_<std::allocator<void> > TutorialParamsResponse;

typedef boost::shared_ptr< ::ddynamic_reconfigure::TutorialParamsResponse > TutorialParamsResponsePtr;
typedef boost::shared_ptr< ::ddynamic_reconfigure::TutorialParamsResponse const> TutorialParamsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ddynamic_reconfigure

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b2d98973833896677e387258d00296b";
  }

  static const char* value(const ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b2d989738338966ULL;
  static const uint64_t static_value2 = 0x77e387258d00296bULL;
};

template<class ContainerAllocator>
struct DataType< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddynamic_reconfigure/TutorialParamsResponse";
  }

  static const char* value(const ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 int_param\n\
float64 double_param\n\
string str_param\n\
bool bool_param\n\
int32 enum_param\n\
";
  }

  static const char* value(const ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.int_param);
      stream.next(m.double_param);
      stream.next(m.str_param);
      stream.next(m.bool_param);
      stream.next(m.enum_param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TutorialParamsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ddynamic_reconfigure::TutorialParamsResponse_<ContainerAllocator>& v)
  {
    s << indent << "int_param: ";
    Printer<int32_t>::stream(s, indent + "  ", v.int_param);
    s << indent << "double_param: ";
    Printer<double>::stream(s, indent + "  ", v.double_param);
    s << indent << "str_param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.str_param);
    s << indent << "bool_param: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bool_param);
    s << indent << "enum_param: ";
    Printer<int32_t>::stream(s, indent + "  ", v.enum_param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DDYNAMIC_RECONFIGURE_MESSAGE_TUTORIALPARAMSRESPONSE_H
